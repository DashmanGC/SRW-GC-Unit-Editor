/*
 * Copyright (C) 2021 Dashman
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package srw.gc.unit.editor;

import java.awt.Color;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTextField;

/**
 *
 * @author Jonatan
 */
public class WeaponPanel extends javax.swing.JPanel {
    Color hidden = new Color(150, 150, 150);  // background for combo weapons
    Color unlockable = new Color(100, 200, 200);  // background for map weapons
    Color map = new Color(200, 200, 100);  // background for map weapons
    Color normal = new Color(240, 240, 240);  // background for normal weapons
    String font_encoding = "MS932";
    
    int max_upgrades = 0;   // More than 15 goes off the ingame panel (and can crash the game)
    
    // Growth models for weapons
    int grow1[] = {100,100,100,150,150,150,200,200,200,250,250,250,300,300,300};
    int grow2[] = {100,100,150,150,200,200,250,250,250,300,300,300,300,300,300};
    int grow3[] = {100,150,150,200,200,250,250,300,300,300,300,300,300,300,300};
    int growM[] = {50,50,50,100,100,100,150,150,150,200,200,200,250,250,250};
        
    /*String[] bgms = {"No BGM", "Honto no Kiss wo okaeshi ni", "Run like Melos", "V-MAX", "Dream Shift", 
        "Our Fighting Spirit", "Bryger ", "Khamen Khamen", "Baxinger ", "LETSU", 
        "Sasuraiger ", "TRY TRY TRY", "Trider's song", "Daiohja ", "Kaze no NO REPLY", 
        "Time for L-Gaim", "Yume-iro CHASER", "Red Comet", "White Base", 
        "Scorching Heat", "Ai Senshi", "Lalah", "Megurirai", "Itsuka sora ni todoite", 
        "Shining in the storm", "Chasing Haman", "Activate ZZ", "Beyond the Time", 
        "Storm", "Fire Wars", "Mazinkaiser's theme", "Daltanious' Song", "Main Theme", 
        "End Roll", "Introduction to Fight", "Level Up", "Future Closed", 
        "Intermission", "CHARGE THE SOUL OF FIGHTERS", "SPLENDID STAR", "REAL ABILITY", 
        "CHANCE OF VICTORY", "Fierce Attack", "Madness Unleashed", "Noble Soul", 
        "Breakthrough", "Approaching Threat", "Slaughter Weapon", "Waking Darkness", 
        "Fleeting Peace", "Charge", "Fading Heart", "Uncontrollable Anxiety", 
        "SHOW YOUR DAZZLING SMILE", "Conspiracy", "Gospel", "Foundation of Justice", 
        "Turning Evil"};*/
    
    String[] bgms ={"(no BGM)", "A True Kiss in Return", "Like Melos ~Lonely Way~", "To the Approaching One", "Dream Shift", 
        "Our Fighting Spirit", "Galactic Cyclone Braiger", "Khamen Khamen", "Galactic Gale Baxinger", "Letsu", 
        "Galactic Whirlwind Sasuraiger", "Try Try Try", "Trider G7's Theme", "Strongest Robot Daiohja", "Wind of No Reply", 
        "Charge, L-Gaim", "Dream-Colored Chaser", "The Red Comet", "White Base", 
        "Burning", "Soldiers of Sorrow", "Lalah", "Encounters", "Reach Out to the Sky Someday", 
        "Shine in the Storm", "Haman Gives Chase", "Activate! Double Zeta", "Beyond the Time", 
        "Storm", "Fire Wars", "Mazinkaiser's Theme", "Song of Daltanious", "Main Theme ~ The Curtains Open for the Wars", 
        "End Roll ~ Close the Curtains", "Prelude to the Battle", "Level Up", "Closed Off Future", 
        "Intermission ~ The Warriors' Resonance", "Charge the Soul of Fighters", "Splendid Star", "Real Ability", 
        "Chance of Victory", "Fierce Attack", "Madness Unleashed", "Motivated Soul",
        "Forceful Breakthrough", "Looming Menace", "The Speartip of Slaughter", "Awakening Darkness", 
        "A Moment of Tranquility", "Raid", "Faded Heart", "Persistent Anxiety", 
        "Show Your Dazzling Smile", "Nesting Strategy", "Gospel", "Cornerstone of Justice", "Evil Melody"};

    /**
     * Creates new form WeaponPanel
     */
    public WeaponPanel() {
        initComponents();
        
        setValuesBGM(bgms);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelWeapID = new javax.swing.JLabel();
        labelAnim = new javax.swing.JLabel();
        fieldAnim = new javax.swing.JTextField();
        labelBGM = new javax.swing.JLabel();
        comboBGM = new javax.swing.JComboBox<>();
        labelHeader = new javax.swing.JLabel();
        labPower = new javax.swing.JLabel();
        fieldPowBase = new javax.swing.JTextField();
        fieldPowMax = new javax.swing.JTextField();
        fieldRangeMin = new javax.swing.JTextField();
        labelTo = new javax.swing.JLabel();
        fieldRangeMax = new javax.swing.JTextField();
        fieldHit = new javax.swing.JTextField();
        fieldCrit = new javax.swing.JTextField();
        fieldAmmo = new javax.swing.JTextField();
        labelHeader1 = new javax.swing.JLabel();
        fieldEN = new javax.swing.JTextField();
        fieldWill = new javax.swing.JTextField();
        comboMount = new javax.swing.JComboBox<>();
        fieldCombo = new javax.swing.JTextField();
        panelType = new javax.swing.JPanel();
        checkType1 = new javax.swing.JCheckBox();
        checkType2 = new javax.swing.JCheckBox();
        checkType3 = new javax.swing.JCheckBox();
        checkType4 = new javax.swing.JCheckBox();
        checkType5 = new javax.swing.JCheckBox();
        checkType6 = new javax.swing.JCheckBox();
        checkType7 = new javax.swing.JCheckBox();
        checkType8 = new javax.swing.JCheckBox();
        panelProperties = new javax.swing.JPanel();
        checkProp01 = new javax.swing.JCheckBox();
        checkProp02 = new javax.swing.JCheckBox();
        checkProp03 = new javax.swing.JCheckBox();
        checkProp04 = new javax.swing.JCheckBox();
        checkProp05 = new javax.swing.JCheckBox();
        checkProp06 = new javax.swing.JCheckBox();
        checkProp07 = new javax.swing.JCheckBox();
        checkProp08 = new javax.swing.JCheckBox();
        checkProp09 = new javax.swing.JCheckBox();
        checkProp10 = new javax.swing.JCheckBox();
        checkProp11 = new javax.swing.JCheckBox();
        checkProp12 = new javax.swing.JCheckBox();
        checkProp13 = new javax.swing.JCheckBox();
        checkProp14 = new javax.swing.JCheckBox();
        checkProp15 = new javax.swing.JCheckBox();
        checkProp16 = new javax.swing.JCheckBox();
        panelUnknown = new javax.swing.JPanel();
        fieldByte01 = new javax.swing.JTextField();
        fieldByte10 = new javax.swing.JTextField();
        fieldByte21 = new javax.swing.JTextField();
        fieldByte23 = new javax.swing.JTextField();
        labelHeader3 = new javax.swing.JLabel();
        fieldByte24 = new javax.swing.JTextField();
        labelID = new javax.swing.JLabel();
        panelTerrain = new javax.swing.JPanel();
        comboSpace = new javax.swing.JComboBox<>();
        comboWater = new javax.swing.JComboBox<>();
        comboLand = new javax.swing.JComboBox<>();
        comboAir = new javax.swing.JComboBox<>();
        labelHeader2 = new javax.swing.JLabel();
        fieldName = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 0, 204), 2));
        setPreferredSize(new java.awt.Dimension(500, 385));

        labelWeapID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelWeapID.setText("Weapon ID:");

        labelAnim.setText("Animation ID");

        fieldAnim.setEditable(false);
        fieldAnim.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        labelBGM.setText("BGM override");

        comboBGM.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-" }));

        labelHeader.setText("                     Base           Max            Weapon range       Hit bonus      Crit bonus");

        labPower.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        labPower.setText("Power");

        fieldPowBase.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        fieldPowBase.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldPowBaseKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldPowBaseKeyTyped(evt);
            }
        });

        fieldPowMax.setEditable(false);
        fieldPowMax.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        fieldRangeMin.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        fieldRangeMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldRangeMinKeyTyped(evt);
            }
        });

        labelTo.setText("~");

        fieldRangeMax.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        fieldRangeMax.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldRangeMaxKeyTyped(evt);
            }
        });

        fieldHit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        fieldHit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldHitKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldHitKeyTyped(evt);
            }
        });

        fieldCrit.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        fieldCrit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                fieldCritKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldCritKeyTyped(evt);
            }
        });

        fieldAmmo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        fieldAmmo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldAmmoKeyTyped(evt);
            }
        });

        labelHeader1.setText("                     Ammo       EN cost       Will req.        Mounted on         Combo ID");

        fieldEN.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        fieldEN.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldENKeyTyped(evt);
            }
        });

        fieldWill.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        fieldWill.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldWillKeyTyped(evt);
            }
        });

        comboMount.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nowhere", "HEAD", "ARMS", "BODY", "LEGS" }));

        fieldCombo.setEditable(false);
        fieldCombo.setHorizontalAlignment(javax.swing.JTextField.TRAILING);
        fieldCombo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                fieldComboKeyTyped(evt);
            }
        });

        panelType.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Weapon type", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(5, 109, 255))); // NOI18N

        checkType1.setText("Infight");

        checkType2.setText("Gunfight");

        checkType3.setText("???");
        checkType3.setEnabled(false);

        checkType4.setText("???");
        checkType4.setEnabled(false);

        checkType5.setText("Post-move");

        checkType6.setText("Beam");

        checkType7.setText("Missile");

        checkType8.setText("MAP");
        checkType8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkType8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelTypeLayout = new javax.swing.GroupLayout(panelType);
        panelType.setLayout(panelTypeLayout);
        panelTypeLayout.setHorizontalGroup(
            panelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelTypeLayout.createSequentialGroup()
                        .addComponent(checkType1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkType5, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelTypeLayout.createSequentialGroup()
                        .addComponent(checkType2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkType6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelTypeLayout.createSequentialGroup()
                        .addComponent(checkType3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkType7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelTypeLayout.createSequentialGroup()
                        .addComponent(checkType4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkType8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTypeLayout.setVerticalGroup(
            panelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTypeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkType1)
                    .addComponent(checkType5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkType2)
                    .addComponent(checkType6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkType3)
                    .addComponent(checkType7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkType4)
                    .addComponent(checkType8))
                .addContainerGap())
        );

        panelProperties.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Other properties", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(5, 109, 255))); // NOI18N

        checkProp01.setText("NT Lv1");

        checkProp02.setText("NT Lv5");

        checkProp03.setText("Lv10");

        checkProp04.setText("Lv15");

        checkProp05.setText("???");
        checkProp05.setEnabled(false);

        checkProp06.setText("???");
        checkProp06.setEnabled(false);

        checkProp07.setText("???");
        checkProp07.setEnabled(false);

        checkProp08.setText("Growth 1");
        checkProp08.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkProp08ActionPerformed(evt);
            }
        });

        checkProp09.setText("Growth 2");
        checkProp09.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkProp09ActionPerformed(evt);
            }
        });

        checkProp10.setText("Growth 3");
        checkProp10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkProp10ActionPerformed(evt);
            }
        });

        checkProp11.setText("Growth M");
        checkProp11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkProp11ActionPerformed(evt);
            }
        });

        checkProp12.setText("Combo");
        checkProp12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkProp12ActionPerformed(evt);
            }
        });

        checkProp13.setText("Event lock");
        checkProp13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkProp13ActionPerformed(evt);
            }
        });

        checkProp14.setText("Can't hit S");

        checkProp15.setText("Hit building");

        checkProp16.setText("???");
        checkProp16.setEnabled(false);

        javax.swing.GroupLayout panelPropertiesLayout = new javax.swing.GroupLayout(panelProperties);
        panelProperties.setLayout(panelPropertiesLayout);
        panelPropertiesLayout.setHorizontalGroup(
            panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPropertiesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelPropertiesLayout.createSequentialGroup()
                        .addComponent(checkProp01, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkProp05, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkProp09, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkProp13, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelPropertiesLayout.createSequentialGroup()
                        .addComponent(checkProp02, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkProp06, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkProp10, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkProp14, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelPropertiesLayout.createSequentialGroup()
                        .addComponent(checkProp03, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkProp07, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkProp11, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkProp15, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelPropertiesLayout.createSequentialGroup()
                        .addComponent(checkProp04, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkProp08, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkProp12, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(checkProp16, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelPropertiesLayout.setVerticalGroup(
            panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPropertiesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkProp01)
                    .addComponent(checkProp05)
                    .addComponent(checkProp09)
                    .addComponent(checkProp13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkProp02)
                    .addComponent(checkProp06)
                    .addComponent(checkProp10)
                    .addComponent(checkProp14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkProp03)
                    .addComponent(checkProp07)
                    .addComponent(checkProp11)
                    .addComponent(checkProp15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelPropertiesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkProp04)
                    .addComponent(checkProp08)
                    .addComponent(checkProp12)
                    .addComponent(checkProp16))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelUnknown.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Unknown bytes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 0, 51))); // NOI18N

        fieldByte01.setEditable(false);
        fieldByte01.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        fieldByte10.setEditable(false);
        fieldByte10.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        fieldByte21.setEditable(false);
        fieldByte21.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        fieldByte23.setEditable(false);
        fieldByte23.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        labelHeader3.setText(" #01         #10         #21          #23         #24");

        fieldByte24.setEditable(false);
        fieldByte24.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        javax.swing.GroupLayout panelUnknownLayout = new javax.swing.GroupLayout(panelUnknown);
        panelUnknown.setLayout(panelUnknownLayout);
        panelUnknownLayout.setHorizontalGroup(
            panelUnknownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUnknownLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelUnknownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelUnknownLayout.createSequentialGroup()
                        .addComponent(fieldByte01, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fieldByte10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fieldByte21, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fieldByte23, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fieldByte24, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(labelHeader3, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelUnknownLayout.setVerticalGroup(
            panelUnknownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelUnknownLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelHeader3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(panelUnknownLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldByte01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldByte10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldByte21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldByte23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldByte24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        labelID.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        labelID.setText("000");

        panelTerrain.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Terrain ratings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(5, 109, 255))); // NOI18N

        comboSpace.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "S", "A", "B", "C" }));

        comboWater.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "S", "A", "B", "C" }));

        comboLand.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "S", "A", "B", "C" }));

        comboAir.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "S", "A", "B", "C" }));

        labelHeader2.setText(" Space        Water        Land            Air   ");

        javax.swing.GroupLayout panelTerrainLayout = new javax.swing.GroupLayout(panelTerrain);
        panelTerrain.setLayout(panelTerrainLayout);
        panelTerrainLayout.setHorizontalGroup(
            panelTerrainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTerrainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTerrainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelHeader2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelTerrainLayout.createSequentialGroup()
                        .addComponent(comboSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboWater, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboLand, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboAir, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelTerrainLayout.setVerticalGroup(
            panelTerrainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelTerrainLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(labelHeader2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTerrainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboWater, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboSpace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboLand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboAir, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        fieldName.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(panelType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panelProperties, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(labPower, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fieldPowBase, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldPowMax, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fieldRangeMin, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labelTo, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fieldRangeMax, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fieldHit, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fieldCrit, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(labelHeader1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelHeader, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(fieldAmmo, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fieldEN, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fieldWill, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(comboMount, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fieldCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(labelWeapID, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(labelID, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(fieldName))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(labelAnim, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(fieldAnim, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(labelBGM, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(comboBGM, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(panelTerrain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(panelUnknown, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelWeapID)
                    .addComponent(labelID)
                    .addComponent(fieldName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAnim)
                    .addComponent(fieldAnim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelBGM)
                    .addComponent(comboBGM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelHeader)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labPower)
                    .addComponent(fieldPowBase, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldPowMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldRangeMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelTo)
                    .addComponent(fieldRangeMax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldHit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldCrit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelHeader1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fieldAmmo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldEN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldWill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(comboMount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fieldCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelTerrain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelUnknown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelType, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelProperties, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void fieldPowBaseKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldPowBaseKeyTyped
        filterNonNumber(evt);
    }//GEN-LAST:event_fieldPowBaseKeyTyped

    private void fieldRangeMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldRangeMinKeyTyped
        filterNonNumber(evt);
    }//GEN-LAST:event_fieldRangeMinKeyTyped

    private void fieldRangeMaxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldRangeMaxKeyTyped
        filterNonNumber(evt);
    }//GEN-LAST:event_fieldRangeMaxKeyTyped

    private void fieldHitKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldHitKeyTyped
        if (evt.getKeyChar() == '-'){
            evt.consume();
            
            String aux = fieldHit.getText();
            if (!aux.contains("-")){
                aux = "-" + aux;
                fieldHit.setText(aux);
            }
        }
        else 
            filterNonNumber(evt);
    }//GEN-LAST:event_fieldHitKeyTyped

    private void fieldCritKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldCritKeyTyped
        if (evt.getKeyChar() == '-'){
            evt.consume();
            
            String aux = fieldCrit.getText();
            if (!aux.contains("-")){
                aux = "-" + aux;
                fieldCrit.setText(aux);
            }
        }
        else 
            filterNonNumber(evt);
    }//GEN-LAST:event_fieldCritKeyTyped

    private void fieldAmmoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldAmmoKeyTyped
        filterNonNumber(evt);
    }//GEN-LAST:event_fieldAmmoKeyTyped

    private void fieldENKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldENKeyTyped
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9' || evt.getKeyChar() == ' ')
            evt.consume();
    }//GEN-LAST:event_fieldENKeyTyped

    private void fieldWillKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldWillKeyTyped
        filterNonNumber(evt);
    }//GEN-LAST:event_fieldWillKeyTyped

    private void fieldComboKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldComboKeyTyped
        filterNonNumber(evt);
    }//GEN-LAST:event_fieldComboKeyTyped

    private void checkProp12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkProp12ActionPerformed
        setBackgroundColor();
    }//GEN-LAST:event_checkProp12ActionPerformed

    private void checkProp08ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkProp08ActionPerformed
        setPowerMax();
    }//GEN-LAST:event_checkProp08ActionPerformed

    private void checkProp09ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkProp09ActionPerformed
        setPowerMax();
    }//GEN-LAST:event_checkProp09ActionPerformed

    private void checkProp10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkProp10ActionPerformed
        setPowerMax();
    }//GEN-LAST:event_checkProp10ActionPerformed

    private void checkProp11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkProp11ActionPerformed
        setPowerMax();
    }//GEN-LAST:event_checkProp11ActionPerformed

    private void fieldPowBaseKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldPowBaseKeyReleased
        setPowerMax();
    }//GEN-LAST:event_fieldPowBaseKeyReleased

    private void fieldHitKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldHitKeyReleased
        capValue(fieldHit);
    }//GEN-LAST:event_fieldHitKeyReleased

    private void fieldCritKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_fieldCritKeyReleased
        capValue(fieldCrit);
    }//GEN-LAST:event_fieldCritKeyReleased

    private void checkType8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkType8ActionPerformed
        setBackgroundColor();
    }//GEN-LAST:event_checkType8ActionPerformed

    private void checkProp13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkProp13ActionPerformed
        setBackgroundColor();
    }//GEN-LAST:event_checkProp13ActionPerformed

    private void filterNonNumber(java.awt.event.KeyEvent evt){
        if (evt.getKeyChar() < '0' || evt.getKeyChar() > '9' || evt.getKeyChar() == ' ')
            evt.consume();
    }
    
    private void setBackgroundColor(){
        if (checkProp13.isSelected())
            this.setBackground(unlockable);
        else if (checkType8.isSelected())
            this.setBackground(map);
        else if (checkProp12.isSelected())
            this.setBackground(hidden);
        else
            this.setBackground(normal);
    }
    
    private void capValue(JTextField tf){
        if ( !tf.getText().isEmpty() ){
            int value = Integer.valueOf(tf.getText());
            
            if (value > 127)
                tf.setText("" + 127);
            
            else if (value < -128)
                tf.setText("-" + 128);
        }
    }
    
    public void setSafety(boolean safety){
	fieldAnim.setEditable(safety);
	fieldCombo.setEditable(safety);
	checkType3.setEnabled(safety);
	checkType4.setEnabled(safety);
	checkProp05.setEnabled(safety);
	checkProp06.setEnabled(safety);
	checkProp07.setEnabled(safety);
	checkProp16.setEnabled(safety);
	fieldByte01.setEditable(safety);
	fieldByte10.setEditable(safety);
	fieldByte21.setEditable(safety);
	fieldByte23.setEditable(safety);
	fieldByte24.setEditable(safety);
    }
    
    public void setUpgrades(int u){
        max_upgrades = u;
        
        setPowerMax();
    }
    
    public void setID(int id){
        String aux;
        
        if (id < 10)
            aux = "00";
        else if (id < 100)
            aux = "0";
        else
            aux = "";
                          
        labelID.setText(aux + id);        
    }
    
    public int getID(){
        return Integer.valueOf( labelID.getText() );
    }
    
    public void setWeapName(String n){  
        fieldName.setText(n);        
    }
    
    public void setAnim(int a){
        fieldAnim.setText("" + a);
    }
    
    public int getAnim(){
        return Integer.valueOf( fieldAnim.getText() );
    }
    
    public void setValuesBGM(String[] values){
        // Add numeric IDs at the beginning of each string
        // This avoids issues when several entries have the same name
        // (java can get confused if you just move through the values with the arrow keys)
        for (int i = 0; i < values.length; i++){
            if (values.length < 10){
                values[i] = (i + " " + values[i]);
            }
            else if (values.length < 100){
                if (i < 10)
                    values[i] = ("0" + i + " " + values[i]);
                else
                    values[i] = (i + " " + values[i]);
            }
            else{
                if (i < 10)
                    values[i] = ("00" + i + " " + values[i]);
                else if (i < 100)
                    values[i] = ("0" + i + " " + values[i]);
                else
                    values[i] = (i + " " + values[i]);
            }
        }
        
        ComboBoxModel m = new DefaultComboBoxModel(values);
        
        comboBGM.setModel(m);
    }
    
    public void setBGM(int bgm){
        if (bgm == -1)
            bgm = 0;
        
        comboBGM.setSelectedIndex(bgm);
    }
    
    public int getBGM(){
        int value = comboBGM.getSelectedIndex();
        
        if (value == 0)
            value = -1;
        
        return value;
    }
    
    public void setPower(int p){
        fieldPowBase.setText("" + p);
        
        setPowerMax();
    }
    
    public int getPower(){
        if (fieldPowBase.getText().isEmpty())
            return 0;
        else
            return Integer.valueOf( fieldPowBase.getText() );
    }
    
    private void setPowerMax(){
        int aux = 0;
        
        if (!fieldPowBase.getText().isEmpty())
            aux = Integer.valueOf(fieldPowBase.getText());
        
        int increase = 0;
        
        // Calculate maximum power obtained after applying max_upgrades
        // Growth is calculated following a model that is selected based on the
        // weapon properties. Only the first property found is taken into account
        // for calculating the increase
        if (checkProp08.isSelected()){
            for (int i = 0; i < max_upgrades; i++){
                increase += grow1[i];
            }
        }
        else if (checkProp09.isSelected()){
            for (int i = 0; i < max_upgrades; i++){
                increase += grow2[i];
            }
        }
        else if (checkProp10.isSelected()){
            for (int i = 0; i < max_upgrades; i++){
                increase += grow3[i];
            }
        }
        else if (checkProp11.isSelected()){
            for (int i = 0; i < max_upgrades; i++){
                increase += growM[i];
            }
        }
                
        aux += increase;
        
        fieldPowMax.setText("" + aux);
    }
    
    public void setMinRange(int min){
        fieldRangeMin.setText("" + min);
    }
    
    public int getMinRange(){
        return Integer.valueOf( fieldRangeMin.getText() );
    }
    
    public void setMaxRange(int min){
        fieldRangeMax.setText("" + min);
    }
    
    public int getMaxRange(){
        return Integer.valueOf( fieldRangeMax.getText() );
    }
    
    public void setHit(int h){
        fieldHit.setText("" + h);
    }
    
    public int getHit(){
        return Integer.valueOf( fieldHit.getText() );
    }
    
    public void setCrit(int c){
        fieldCrit.setText("" + c);
    }
    
    public int getCrit(){
        return Integer.valueOf( fieldCrit.getText() );
    }
    
    public void setAmmo(int a){
        fieldAmmo.setText("" + a);
    }
    
    public int getAmmo(){
        return Integer.valueOf( fieldAmmo.getText() );
    }
    
    public void setEN(int e){
        fieldEN.setText("" + e);
    }
    
    public int getEN(){
        return Integer.valueOf( fieldEN.getText() );
    }
    
    public void setWill(int w){
        fieldWill.setText("" + (w & 0xff));
    }
    
    public int getWill(){
        return Integer.valueOf( fieldWill.getText() );
    }
    
    public void setMount(byte part){
        int index = 0;
        
        switch(part){
            case 1:
                index = 1;
                break;
            case 2:
                index = 2;
                break;
            case 4:
                index = 3;
                break;
            case 8:
                index = 4;
                break;
            default:
                break;
        }
        
        comboMount.setSelectedIndex(index);
    }
    
    public int getMount(){
        byte value = 0;
        int index = comboMount.getSelectedIndex();
        
        switch(index){
            case 1:
                value = 1;
                break;
            case 2:
                value = 2;
                break;
            case 3:
                value = 4;
                break;
            case 4:
                value = 8;
                break;
            default:
                break;
        }
        
        return value;
    }
    
    public void setComboID(int cid){
        fieldCombo.setText("" + cid);
        
        //if (cid != -1)
        //    System.out.println("Weapon: Combo ID: " + cid);
    }
    
    public int getComboID(){
        return Integer.valueOf( fieldCombo.getText() );
    }
    
    public void setTerrain(byte[] t){
        if (t.length != 2)
            System.out.println( "WeaponPanel - setTerrain - wrong length: " + t.length );
        else{
            int value;
            
            // Space
            value = ( t[0] & 0xf0 ) >> 4;  // First nibble: Sx xx
            if (value > 4)
                System.out.println( "WeaponPanel - setTerrain - unexpected Space rating for weapon " + getID() );
            else
                setSpace(value);
            
            // Water
            value = t[0] & 0x0f;  // Second nibble: xW xx
            if (value > 4)
                System.out.println( "WeaponPanel - setTerrain - unexpected Water rating for weapon " + getID() );
            else
                setWater(value);
            
            // Land
            value = ( t[1] & 0xf0 ) >> 4;  // Thrid nibble: xx Lx
            if (value > 4)
                System.out.println( "WeaponPanel - setTerrain - unexpected Land rating for weapon " + getID() );
            else
                setLand(value);
            
            // Air
            value = t[1] & 0x0f;  // Fourth nibble: xx xA
            if (value > 4)
                System.out.println( "WeaponPanel - setTerrain - unexpected Air rating for weapon " + getID() );
            else
                setAir(value);
        }
    }
    
    public byte[] getTerrain(){
        byte[] b = new byte[2];
        Integer value;
        
        // Space
        value = getSpace();
        value = value << 4;
        b[0] = value.byteValue();  // First nibble: Sx xx
        
        // Water
        value = getWater();
        b[0] |= value.byteValue();  // Second nibble: xW xx
        
        // Land
        value = getLand();
        value = value << 4;
        b[1] = value.byteValue();  // Thrid nibble: xx Lx
        
        // Air
        value = getAir();
        b[1] |= value.byteValue();  // Fourth nibble: xx xA
                
        return b;
    }
    
    private void setAir(int rating){
        comboAir.setSelectedIndex(rating);
    }
    
    private int getAir(){
        return comboAir.getSelectedIndex();
    }
    
    private void setLand(int rating){
        comboLand.setSelectedIndex(rating);
    }
    
    private int getLand(){
        return comboLand.getSelectedIndex();
    }
    
    private void setSpace(int rating){
        comboSpace.setSelectedIndex(rating);
    }
    
    private int getSpace(){
        return comboSpace.getSelectedIndex();
    }
    
    private void setWater(int rating){
        comboWater.setSelectedIndex(rating);
    }
    
    private int getWater(){
        return comboWater.getSelectedIndex();
    }
    
    public void setType(byte t){
        int value;
        
        // Infight ---- ---X
        value = t & 0x01;        
        setType(1, value == 1);
        
        // Gunfight ---- --X-
        value = t & 0x02;        
        setType(2, value == 2);
        
        // ??? ---- -X--
        value = t & 0x04;        
        setType(3, value == 4);
        
        // ??? ---- X---
        value = t & 0x08;        
        setType(4, value == 8);
        
        // Post-move ---X ----
        value = t & 0x10;        
        setType(5, value == 16);
        
        // Beam --X- ----
        value = t & 0x20;        
        setType(6, value == 32);
        
        // Missile -X-- ----
        value = t & 0x40;        
        setType(7, value == 64);
        
        // MAP X--- ----
        value = t & 0x80;        
        setType(8, value == 128);        
    }
    
    public byte getType(){
        byte b = 0;
        
        // Infight ---- ---X
        if( getType(1) )
            b |= 0x01;
        
        // Gunfight ---- --X-
        if( getType(2) )
            b |= 0x02;
        
        // ??? ---- -X--
        if( getType(3) )
            b |= 0x04;
        
        // ??? ---- X---
        if( getType(4) )
            b |= 0x08;
        
        // Post-move ---X ----
        if( getType(5) )
            b |= 0x10;
        
        // Beam --X- ----
        if( getType(6) )
            b |= 0x20;
        
        // Missile -X-- ----
        if( getType(7) )
            b |= 0x40;
        
        // MAP X--- ----
        if( getType(8) )
            b |= 0x80;
        
        return b;
    }
    
    private void setType(int id, boolean active){
        switch(id){
            case 1:
                checkType1.setSelected(active);
                break;
            case 2:
                checkType2.setSelected(active);
                break;
            case 3:
                checkType3.setSelected(active);
                //if (active)
                //    System.out.println("WeaponPanel: Unusual Type 03 used");
                break;
            case 4:
                checkType4.setSelected(active);
                //if (active)
                //    System.out.println("WeaponPanel: Unusual Type 04 used");
                break;
            case 5:
                checkType5.setSelected(active);
                break;
            case 6:
                checkType6.setSelected(active);
                break;
            case 7:
                checkType7.setSelected(active);
                break;
            case 8:
                checkType8.setSelected(active); 
                
                setBackgroundColor();
                break;    
            default:
                System.out.println("WeaponPanel: setType - wrong ID " + id);
                break;
        }
    }
    
    private boolean getType(int id){
        switch(id){
            case 1:
                return checkType1.isSelected();
            case 2:
                return checkType2.isSelected();
            case 3:
                return checkType3.isSelected();
            case 4:
                return checkType4.isSelected();
            case 5:
                return checkType5.isSelected();
            case 6:
                return checkType6.isSelected();
            case 7:
                return checkType7.isSelected();
            case 8:
                return checkType8.isSelected();
            default:
                System.out.println("WeaponPanel: getType - wrong ID " + id);
                return false;
        }
    }
    
    public void setProp(byte[] p){
        int value;
        
        // Properties come in 2 bytes and are read in reverse
        // First byte to be read is the 2nd one, and we go right to left

        // Properties in 2nd byte
		
        // NT Lv1 ---- ---X
        value = p[1] & 0x01;        
        setProp(1, value == 1);
        
        // NT Lv5 ---- --X-
        value = p[1] & 0x02;        
        setProp(2, value == 2);
        
        // Lv10 ---- -X--
        value = p[1] & 0x04;        
        setProp(3, value == 4);
        
        // Lv15 ---- X---
        value = p[1] & 0x08;        
        setProp(4, value == 8);
        
        // ??? ---X ----
        value = p[1] & 0x10;        
        setProp(5, value == 16);
        
        // ??? --X- ----
        value = p[1] & 0x20;        
        setProp(6, value == 32);
        
        // ??? -X-- ----
        value = p[1] & 0x40;        
        setProp(7, value == 64);
        
        // Growth 1 (normal) X--- ----
        value = p[1] & 0x80;        
        setProp(8, value == 128);     
		
        // Properties in 1st byte
		
        // Growth 2 (fast) ---- ---X
        value = p[0] & 0x01;        
        setProp(9, value == 1);
        
        // Growth 3 (fastest) ---- --X-
        value = p[0] & 0x02;        
        setProp(10, value == 2);
        
        // Growth M (MAP weapons - slow) ---- -X--
        value = p[0] & 0x04;        
        setProp(11, value == 4);
        
        // Combo attack (hides attack) ---- X---
        value = p[0] & 0x08;        
        setProp(12, value == 8);
        
        // ??? ---X ----
        value = p[0] & 0x10;        
        setProp(13, value == 16);
        
        // Can't hit S units --X- ----
        value = p[0] & 0x20;        
        setProp(14, value == 32);
        
        // Can hit building -X-- ----
        value = p[0] & 0x40;        
        setProp(15, value == 64);
        
        // ??? X--- ----
        value = p[0] & 0x80;        
        setProp(16, value == 128);    
    }
    
    public byte[] getProp(){
        byte[] b = new byte[2];
        
	// Properties in 2nd byte
		
        // NT Lv1 ---- ---X
        if( getProp(1) )
            b[1] |= 0x01;
        
        // NT Lv5 ---- --X-
        if( getProp(2) )
            b[1] |= 0x02;
        
        // Lv10 ---- -X--
        if( getProp(3) )
            b[1] |= 0x04;
        
        // Lv15 ---- X---
        if( getProp(4) )
            b[1] |= 0x08;
        
        // ??? ---X ----
        if( getProp(5) )
            b[1] |= 0x10;
        
        // ??? --X- ----
        if( getProp(6) )
            b[1] |= 0x20;
        
        // ??? -X-- ----
        if( getProp(7) )
            b[1] |= 0x40;
        
        // Growth 1 (normal) X--- ----
        if( getProp(8) )
            b[1] |= 0x80; 
		
	// Properties in 1st byte
		
        // Growth 2 (fast) ---- ---X
        if( getProp(9) )
            b[0] |= 0x01;
        
        // Growth 3 (fastest) ---- --X-
        if( getProp(10) )
            b[0] |= 0x02;
        
        // Growth M (MAP weapons - slow) ---- -X--
        if( getProp(11) )
            b[0] |= 0x04;
        
        // Combo attack (hides attack) ---- X---
        if( getProp(12) )
            b[0] |= 0x08;
        
        // ??? ---X ----
        if( getProp(13) )
            b[0] |= 0x10;
        
        // Can't hit S units --X- ----
        if( getProp(14) )
            b[0] |= 0x20;
        
        // Can hit building -X-- ----
        if( getProp(15) )
            b[0] |= 0x40;
        
        // ??? X--- ----
        if( getProp(16) )
            b[0] |= 0x80;  
        
        return b;
    }
    
    private void setProp(int id, boolean active){
        switch(id){
            case 1:
                checkProp01.setSelected(active);
                break;
            case 2:
                checkProp02.setSelected(active);
                break;
            case 3:
                checkProp03.setSelected(active);
                break;
            case 4:
                checkProp04.setSelected(active);
                break;
            case 5:
                checkProp05.setSelected(active);
                //if (active)
                //    System.out.println("WeaponPanel: Unusual Property 05 used");
                break;
            case 6:
                checkProp06.setSelected(active);
                //if (active)
                //    System.out.println("WeaponPanel: Unusual Property 06 used");
                break;
            case 7:
                checkProp07.setSelected(active);
                //if (active)
                //    System.out.println("WeaponPanel: Unusual Property 07 used");
                break;
            case 8:
                checkProp08.setSelected(active);   
                break;   
            case 9:
                checkProp09.setSelected(active);
                break;
            case 10:
                checkProp10.setSelected(active);
                break;
            case 11:
                checkProp11.setSelected(active);
                break;
            case 12:
                checkProp12.setSelected(active);
                
                setBackgroundColor();
                break;
            case 13:
                checkProp13.setSelected(active);
                
                setBackgroundColor();
                
                /*if (active)
                    System.out.println("WeaponPanel: Unlockable weapon found");
                break;*/
            case 14:
                checkProp14.setSelected(active);
                break;
            case 15:
                checkProp15.setSelected(active);
                break;
            case 16:
                checkProp16.setSelected(active);   
                //if (active)
                //    System.out.println("WeaponPanel: Unusual Property 16 used");
                break;         
            default:
                System.out.println("WeaponPanel: getProp - wrong ID " + id);
                break;
        }
    }
    
    private boolean getProp(int id){
        switch(id){
            case 1:
                return checkProp01.isSelected();
            case 2:
                return checkProp02.isSelected();
            case 3:
                return checkProp03.isSelected();
            case 4:
                return checkProp04.isSelected();
            case 5:
                return checkProp05.isSelected();
            case 6:
                return checkProp06.isSelected();
            case 7:
                return checkProp07.isSelected();
            case 8:
                return checkProp08.isSelected();
            case 9:
                return checkProp09.isSelected();
            case 10:
                return checkProp10.isSelected();
            case 11:
                return checkProp11.isSelected();
            case 12:
                return checkProp12.isSelected();
            case 13:
                return checkProp13.isSelected();
            case 14:
                return checkProp14.isSelected();
            case 15:
                return checkProp15.isSelected();
            case 16:
                return checkProp16.isSelected();
            default:
                System.out.println("WeaponPanel: getProp - wrong ID " + id);
                return false;
        }
    }
    
    public void setByte01(int b){
        fieldByte01.setText("" + (b & 0xff) );   // Avoid negative values
        
        //if (b != 0)
        //    System.out.println("WeaponPanel: Byte 01 not equal 0!");
    }
    
    public int getByte01(){
        return Integer.valueOf( fieldByte01.getText() );
    }
    
    public void setByte10(int b){
        fieldByte10.setText("" + (b & 0xff) );   // Avoid negative values
        
        //if (b != 0)
        //    System.out.println("WeaponPanel: Byte 10 not equal 0!");
    }
    
    public int getByte10(){
        return Integer.valueOf( fieldByte10.getText() );
    }
    
    public void setByte21(int b){
        fieldByte21.setText("" + (b & 0xff) );   // Avoid negative values
        
        //if (b != 0)
        //    System.out.println("WeaponPanel: Byte 21 not equal 0!");
    }
    
    public int getByte21(){
        return Integer.valueOf( fieldByte21.getText() );
    }
    
    public void setByte23(int b){
        fieldByte23.setText("" + (b & 0xff) );   // Avoid negative values
        
        //if (b != 0)
        //    System.out.println("WeaponPanel: Byte 23 not equal 0!");
    }
    
    public int getByte23(){
        return Integer.valueOf( fieldByte23.getText() );
    }
    
    public void setByte24(int b){
        fieldByte24.setText("" + (b & 0xff) );   // Avoid negative values
        
        //if (b != 0)
        //    System.out.println("WeaponPanel: Byte 24 not equal 0!");
    }
    
    public int getByte24(){
        return Integer.valueOf( fieldByte24.getText() );
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkProp01;
    private javax.swing.JCheckBox checkProp02;
    private javax.swing.JCheckBox checkProp03;
    private javax.swing.JCheckBox checkProp04;
    private javax.swing.JCheckBox checkProp05;
    private javax.swing.JCheckBox checkProp06;
    private javax.swing.JCheckBox checkProp07;
    private javax.swing.JCheckBox checkProp08;
    private javax.swing.JCheckBox checkProp09;
    private javax.swing.JCheckBox checkProp10;
    private javax.swing.JCheckBox checkProp11;
    private javax.swing.JCheckBox checkProp12;
    private javax.swing.JCheckBox checkProp13;
    private javax.swing.JCheckBox checkProp14;
    private javax.swing.JCheckBox checkProp15;
    private javax.swing.JCheckBox checkProp16;
    private javax.swing.JCheckBox checkType1;
    private javax.swing.JCheckBox checkType2;
    private javax.swing.JCheckBox checkType3;
    private javax.swing.JCheckBox checkType4;
    private javax.swing.JCheckBox checkType5;
    private javax.swing.JCheckBox checkType6;
    private javax.swing.JCheckBox checkType7;
    private javax.swing.JCheckBox checkType8;
    private javax.swing.JComboBox<String> comboAir;
    private javax.swing.JComboBox<String> comboBGM;
    private javax.swing.JComboBox<String> comboLand;
    private javax.swing.JComboBox<String> comboMount;
    private javax.swing.JComboBox<String> comboSpace;
    private javax.swing.JComboBox<String> comboWater;
    private javax.swing.JTextField fieldAmmo;
    private javax.swing.JTextField fieldAnim;
    private javax.swing.JTextField fieldByte01;
    private javax.swing.JTextField fieldByte10;
    private javax.swing.JTextField fieldByte21;
    private javax.swing.JTextField fieldByte23;
    private javax.swing.JTextField fieldByte24;
    private javax.swing.JTextField fieldCombo;
    private javax.swing.JTextField fieldCrit;
    private javax.swing.JTextField fieldEN;
    private javax.swing.JTextField fieldHit;
    private javax.swing.JTextField fieldName;
    private javax.swing.JTextField fieldPowBase;
    private javax.swing.JTextField fieldPowMax;
    private javax.swing.JTextField fieldRangeMax;
    private javax.swing.JTextField fieldRangeMin;
    private javax.swing.JTextField fieldWill;
    private javax.swing.JLabel labPower;
    private javax.swing.JLabel labelAnim;
    private javax.swing.JLabel labelBGM;
    private javax.swing.JLabel labelHeader;
    private javax.swing.JLabel labelHeader1;
    private javax.swing.JLabel labelHeader2;
    private javax.swing.JLabel labelHeader3;
    private javax.swing.JLabel labelID;
    private javax.swing.JLabel labelTo;
    private javax.swing.JLabel labelWeapID;
    private javax.swing.JPanel panelProperties;
    private javax.swing.JPanel panelTerrain;
    private javax.swing.JPanel panelType;
    private javax.swing.JPanel panelUnknown;
    // End of variables declaration//GEN-END:variables
}
